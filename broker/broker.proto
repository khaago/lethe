// Lethe remembers so your soul can ride in oblivion.
syntax = "proto3";

package lethe;

// Base broker template.
service Broker {
  // send an event to one a topic and receive an ack
  rpc Dispatch (EventPacket) returns (DispatchAck) {}
  // send a stream of events and receive a corresponding stream of acks
  rpc DispatchStream (stream EventPacket) returns (DispatchAck) {}

  // listen to a topic for events
  rpc Listen (ListenOptions) returns (stream Event) {}

  // create new topic
  rpc CreateTopic(TopicInfo) returns (Ack) {}
  // delete existing topic
  rpc DeleteTopic(TopicInfo) returns (Ack){}
  // list topics
  rpc ListTopics(TopicInfo) returns (TopicResults) {}
}

// Generic acknowledgment of any request
message Ack {
  StatusCode statusCode = 1;
  string message = 2;
}
enum StatusCode {
  SUCCESS = 0;
  REQUEST_FAILURE = 1;
  SERVER_FAILURE = 2;
}

// Wraps generic acknowledgment with an additional serial number of the latest message received
message DispatchAck {
  Ack ack = 1;
  int64 serial_number = 2;
}

// Wrap an event to send to a given topic
message EventPacket {
  string topic = 1;
  Event event = 2;
}
// Clients are responsible to serialize the payload of the event into bytes.
// Additional string metadata may be provided.
message Event {
  bytes data = 1;
  map<string, string> metadata = 2;
}

message ListenOptions {
  string topic_name = 1;         // name of the topic
  int64 serial_number = 2;      // don't provide if wanting to start from the latest
}

message TopicInfo {
  string topic_name = 1;
}

message TopicResults {
  repeated string topics = 1;
}
