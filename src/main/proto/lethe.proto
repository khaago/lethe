syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.khaago.lethe";
option java_outer_classname = "LetheProto";

package lethe;

// Base broker template.
service Broker {
  // send an event to one or more topics and receive an ack
  rpc Dispatch (DispatchOptions) returns (Ack) {}
  // send a stream of events and receive a corresponding stream of acks
  rpc DispatchStream (stream DispatchOptions) returns (stream Ack) {}

  // susbcribe to a topic - tell the sever you want to receive events for a certain topic
  rpc Subscribe (SubscribeOptions) returns (Topic) {}
  // listen to a topic for events
  rpc Listen (ListenOptions) returns (stream Event) {}

  // admin - list client
  rpc ListClient(ListClientOptions) returns (stream Client) {}

  // list topics
  rpc ListTopic(ListTopicOptions) returns (stream Topic) {}
  // create new topic
  rpc CreateTopic(CreateTopicOptions) returns (Topic) {}
  // delete existing topic
  rpc DeleteTopic(DeleteTopicOptions) returns (DeleteTopicResult) {}
  // update Topic info
  rpc UpdateTopic(UpdateTopicOptions) returns (Topic) {}
}

message SubscribeOptions {
  string topic_name = 1;
  TopicOptions topic_options = 2;
}

message DispatchOptions {
  repeated string topics = 1;
  Event event = 2;
}

// regex
message ListTopicOptions {
  string pattern = 1;
  map<string, string> properties = 2;
}

message ListTopicResult {
  repeated Topic topic = 1;
}

message UpdateTopicOptions {
  string description = 1;
  int64 retention = 2;
  map<string, string> properties = 3;
}

message Client {
  string client_name = 1;
  map<string, string> properties = 3;
}

// message_id -> start listening from this message_id
message ListenOptions {
  string topic_name = 1;
  int32 message_id = 2;
}

message CreateTopicOptions {
  string name = 1;
  string description = 2;
  int64 retention = 3;
  map<string, string> properties = 4;
}

// delete the topic and all messages in it
message DeleteTopicOptions {
  string name = 1;
}

message DeleteTopicResult {
  string name = 1;
  bool success = 2;
}

message Topic {
  string name = 1;
  string created = 2;
  int64 retention = 3;
  string description = 4;
  TopicOptions options = 5;
  map<string, string> properties = 6;
}

message TopicOptions {
  // not implemented
}

// same msg_id can have multiple parts
message Event {
  string event_id = 1;
  string part = 2;
  bool last = 3;  // which is the last part
  bytes msg = 4;
  int64 time = 5;
}

message Ack {
  string msg_id = 1;
  string part = 2;
  int64 time = 4;
  string success = 5;
}

// admin
message  ListClientOptions {
  string name = 1;
  string id = 2;
  map<string, string> properties = 3;
}
