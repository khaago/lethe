syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.khaago.lethe";
option java_outer_classname = "LetheProto";

package lethe;

// Base broker template.
service Broker {
  // register a client. lethe maintains a client inventory
  rpc Register(Client) returns (Client) {}
  rpc Update(Client) returns (Client) {}
  rpc GetClient(Client) returns (Client) {}

  // create new topic
  rpc CreateTopic(CreateTopicOptions) returns (Topic) {}
  // list topics
  rpc ListTopic(ListTopicOptions) returns (stream Topic) {}
  // delete existing topic
  rpc DeleteTopic(DeleteTopicOptions) returns (DeleteTopicResult) {}
  // update Topic info
  rpc UpdateTopic(Topic) returns (Topic) {}

  // subscribe to a topic - tell the sever you want to receive events for a certain topic
  rpc Subscribe (SubscribeOptions) returns (Topic) {}
  // contribute to a topic - tell the sever you want to start sending sending events to a certain topic
  rpc Contribute (ContributeOptions) returns (Topic) {}

  // send a stream of events and receive a corresponding stream of acks
  rpc DispatchStream (stream DispatchOptions) returns (stream EventAck) {}
  // listen to a topic for events
  rpc Listen (ListenOptions) returns (stream Event) {}

  // admin - list client
  rpc ListClient(ListClientOptions) returns (stream Client) {}
}

message SubscribeOptions {
  string topic_name = 1;
  int64 topic_id = 2;
}

message ContributeOptions {
  string topic_name = 1;
  int64 topic_id = 2;
}

message DispatchOptions {
  repeated string topics = 1;
  repeated int64 topic_ids = 2;
  Event event = 3;
}

// regex
message ListTopicOptions {
  string pattern = 1;
  repeated int64 ids = 2;
  map<string, string> properties = 3;
}

message ListTopicResult {
  repeated Topic topic = 1;
  string message = 2;
}

message Client {
  int64 id = 1;
  string name = 2;
  map<string, string> properties = 3;
  string address = 4;
  repeated Topic contributions = 5;
  repeated Topic subscriptions = 6;
}

message ListenOptions {
  string topic_name = 1;
  int64 topic_id = 2;
  int64 event_id = 3; // tart listening from this event id
}

message CreateTopicOptions {
  string name = 1;
  string description = 2;
  int64 retention = 3;
  map<string, string> properties = 4;
}

// delete the topic and all messages in it
message DeleteTopicOptions {
  int64 id = 1;
  string name = 2;
}

message DeleteTopicResult {
  int64 id = 2;
  string name = 1;
  bool success = 3;
}

message Topic {
  int64 id = 1;
  string name = 2;
  string created = 3;
  int64 retention = 4;
  string description = 5;
  map<string, string> properties = 7;
  repeated Client contributors = 8;
  repeated Client subscribers = 9;
}

// same msg_id can have multiple parts
message Event {
  int64 id = 1;
  string part = 2;
  bool last = 3;  // which is the last part
  bytes msg = 4;
  int64 time = 5;
  int64 topic_id = 6;
}

message EventAck {
  int64 id = 1;
  string part = 2;
  int64 time = 3;
}

// admin
message  ListClientOptions {
  string name = 1;
  string id = 2;
  map<string, string> properties = 3;
}
